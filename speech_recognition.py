#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Vosk
"""

import os
import re
import json
import wave
import shutil
import subprocess
from pathlib import Path
from datetime import datetime
from vosk import Model, KaldiRecognizer


class AudioTranscriber:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, config_path="config.json"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–µ—Ä–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        self.config = self.load_config(config_path)
        self.model = self.load_model()
        self.validate_language_config()
        
    def load_config(self, config_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(config_path):
            raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Vosk"""
        model_path = self.config['model_path']
        
        if not os.path.exists(model_path):
            raise FileNotFoundError(
                f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {model_path}\n"
                f"–°–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å —Å https://alphacephei.com/vosk/models\n"
                f"–î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: vosk-model-small-ru-0.22 –∏–ª–∏ vosk-model-ru-0.42"
            )
        
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ {model_path}...")
        model = Model(model_path)
        print("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        return model
    
    def extract_language_from_model_path(self):
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ —è–∑—ã–∫–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏.
        –ü—Ä–∏–º–µ—Ä—ã:
        - vosk-model-small-ru-0.22 -> ru
        - vosk-model-ru-0.42 -> ru
        - vosk-model-en-us-0.22 -> en-us
        - vosk-model-small-en-us-0.22 -> en-us
        """
        model_path = self.config['model_path']
        model_name = Path(model_path).name
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π
        patterns = [
            r'vosk-model-small-([a-z]{2}(?:-[a-z]{2})?)-[\d.]+',  # vosk-model-small-ru-0.22
            r'vosk-model-([a-z]{2}(?:-[a-z]{2})?)-[\d.]+',        # vosk-model-ru-0.42
            r'vosk-model-small-([a-z]{2})',                        # vosk-model-small-ru
            r'vosk-model-([a-z]{2})',                              # vosk-model-ru
        ]
        
        for pattern in patterns:
            match = re.search(pattern, model_name, re.IGNORECASE)
            if match:
                return match.group(1).lower()
        
        return None
    
    def validate_language_config(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —è–∑—ã–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        –í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏.
        """
        detected_lang = self.extract_language_from_model_path()
        config_lang = self.config.get('language', '').strip().lower()
        
        if detected_lang:
            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —è–∑—ã–∫ –º–æ–¥–µ–ª–∏: {detected_lang}")
            
            # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not config_lang:
                print(f"‚úì –Ø–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π: {detected_lang}")
                self.config['language'] = detected_lang
                config_lang = detected_lang
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è, –µ—Å–ª–∏ —è–∑—ã–∫ —É–∫–∞–∑–∞–Ω
            if config_lang and config_lang != detected_lang:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, en-us –∏ en)
                if not (config_lang.startswith(detected_lang) or detected_lang.startswith(config_lang)):
                    print("\n" + "!"*60)
                    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ!")
                    print("!"*60)
                    print(f"–Ø–∑—ã–∫ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: '{self.config['language']}'")
                    print(f"–Ø–∑—ã–∫ –º–æ–¥–µ–ª–∏: '{detected_lang}'")
                    print(f"\n–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ —è–∑—ã–∫–µ: {detected_lang}")
                    print(f"(–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –º–æ–¥–µ–ª—å—é, –∞ –Ω–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º 'language' –≤ config.json)")
                    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –æ–±–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä 'language' –≤ config.json")
                    print(f"   –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ '{detected_lang}' –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.")
                    print("!"*60 + "\n")
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                    print(f"üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è '{detected_lang}' –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
                    self.config['language'] = detected_lang
        else:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
            if config_lang:
                print(f"–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —è–∑—ã–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_lang}")
            else:
                print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –Ø–∑—ã–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!")
                print("–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä 'language' –≤ config.json –≤—Ä—É—á–Ω—É—é")
                self.config['language'] = 'unknown'
    
    def convert_to_wav(self, input_file, output_file):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç WAV —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        –∏—Å–ø–æ–ª—å–∑—É—è ffmpeg
        """
        sample_rate = self.config['sample_rate']
        
        command = [
            'ffmpeg',
            '-i', input_file,
            '-ar', str(sample_rate),  # Sample rate
            '-ac', '1',  # Mono
            '-sample_fmt', 's16',  # 16-bit
            '-y',  # Overwrite output file
            '-loglevel', 'error',  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
            output_file
        ]
        
        try:
            result = subprocess.run(
                command,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                check=True,
                encoding='utf-8',
                errors='ignore'
            )
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            if e.stderr:
                print(f"–î–µ—Ç–∞–ª–∏: {e.stderr}")
            return False
            
        except FileNotFoundError:
            print("\n" + "!"*60)
            print("‚ö†Ô∏è  ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("!"*60)
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg:")
            print("")
            print("Windows (—á–µ—Ä–µ–∑ Chocolatey):")
            print("  choco install ffmpeg")
            print("")
            print("Windows (—á–µ—Ä–µ–∑ Scoop):")
            print("  scoop install ffmpeg")
            print("")
            print("Windows (—á–µ—Ä–µ–∑ winget):")
            print("  winget install ffmpeg")
            print("")
            print("Linux (Ubuntu/Debian):")
            print("  sudo apt install ffmpeg")
            print("")
            print("macOS:")
            print("  brew install ffmpeg")
            print("!"*60 + "\n")
            return False
    
    def transcribe_audio(self, wav_file):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
        wf = wave.open(wav_file, "rb")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        if wf.getnchannels() != 1:
            wf.close()
            raise ValueError("–ê—É–¥–∏–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–æ–Ω–æ")
        
        if wf.getsampwidth() != 2:
            wf.close()
            raise ValueError("–ê—É–¥–∏–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 16-–±–∏—Ç–Ω—ã–º")
        
        if wf.getframerate() != self.config['sample_rate']:
            wf.close()
            raise ValueError(f"–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {self.config['sample_rate']} Hz")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
        rec = KaldiRecognizer(self.model, wf.getframerate())
        rec.SetWords(True)
        
        results = []
        
        print("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ...")
        
        # –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –ø–æ —á–∞—Å—Ç—è–º
        while True:
            data = wf.readframes(4000)
            if len(data) == 0:
                break
            
            if rec.AcceptWaveform(data):
                result = json.loads(rec.Result())
                if 'text' in result and result['text']:
                    results.append(result)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_result = json.loads(rec.FinalResult())
        if 'text' in final_result and final_result['text']:
            results.append(final_result)
        
        wf.close()
        
        return results
    
    def format_results_to_markdown(self, results, original_filename):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Markdown"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        markdown = f"# –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞\n\n"
        markdown += f"**–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª:** {original_filename}\n\n"
        markdown += f"**–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {timestamp}\n\n"
        markdown += f"**–Ø–∑—ã–∫:** {self.config['language']}\n\n"
        markdown += f"---\n\n"
        markdown += f"## –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n\n"
        
        if not results:
            markdown += "*–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω*\n"
        else:
            full_text = " ".join([r.get('text', '') for r in results if r.get('text')])
            markdown += f"{full_text}\n\n"
        
        return markdown
    
    def process_file(self, input_file):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
        input_path = Path(input_file)
        
        print(f"\n{'='*60}")
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {input_path.name}")
        print(f"{'='*60}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        if input_path.suffix.lower() not in self.config['supported_formats']:
            print(f"–ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞ {input_path.name}: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return False
        
        # –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É WAV —Ñ–∞–π–ª—É
        temp_wav = Path(self.config['output_dir']) / f"temp_{input_path.stem}.wav"
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV
            print(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {input_path.suffix} -> WAV...")
            if not self.convert_to_wav(str(input_path), str(temp_wav)):
                print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ {input_path.name}")
                return False
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
            results = self.transcribe_audio(str(temp_wav))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            markdown = self.format_results_to_markdown(results, input_path.name)
            
            output_file = Path(self.config['output_dir']) / f"{input_path.stem}.md"
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(markdown)
            
            print(f"‚úì –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_file}")
            
            # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫—É processed
            processed_dir = Path(self.config['processed_dir'])
            processed_dir.mkdir(parents=True, exist_ok=True)
            
            processed_file = processed_dir / input_path.name
            shutil.move(str(input_path), str(processed_file))
            print(f"‚úì –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤: {processed_file}")
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {input_path.name}: {e}")
            return False
        
        finally:
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if temp_wav.exists():
                temp_wav.unlink()
    
    def process_directory(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –≤—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        input_dir = Path(self.config['input_dir'])
        output_dir = Path(self.config['output_dir'])
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        audio_files = []
        for ext in self.config['supported_formats']:
            audio_files.extend(list(input_dir.glob(f"*{ext}")))
            audio_files.extend(list(input_dir.glob(f"*{ext.upper()}")))
        
        if not audio_files:
            print(f"\n–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {input_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
            print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(self.config['supported_formats'])}")
            return
        
        print(f"\n–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(audio_files)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        success_count = 0
        for audio_file in audio_files:
            if self.process_file(audio_file):
                success_count += 1
        
        print(f"\n{'='*60}")
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count} –∏–∑ {len(audio_files)}")
        print(f"{'='*60}\n")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("="*60)
    print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ (Vosk)")
    print("="*60)
    
    try:
        transcriber = AudioTranscriber()
        transcriber.process_directory()
    except Exception as e:
        print(f"\n–û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())

